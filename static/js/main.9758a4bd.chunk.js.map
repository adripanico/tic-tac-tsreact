{"version":3,"sources":["Game/Square.tsx","Game/Board.tsx","Game/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Square","classNames","this","props","highlight","pointer","undefined","value","className","onClick","React","Component","Board","i","winnerLine","includes","key","squares","Array","fill","map","s","renderSquare","Game","state","currentMove","history","clicked","xIsNext","current","getWinnerLine","line","a","b","c","slice","getWinner","setState","concat","move","status","lastMove","length","winnerInLastMove","moves","step","movDesc","statusClassName","jumpTo","record","turn","filter","row","Math","floor","col","getClickPositionHistoryRecord","winnerInCurrentMove","handleClick","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9758a4bd.chunk.js","sourcesContent":["import React from 'react';\nimport { SquareProps } from './types';\n\nexport class Square extends React.Component<SquareProps, {}> {\n  render() {\n    const classNames = 'square' +\n      (this.props.highlight ? ' highlight' : '') +\n      (this.props.pointer && this.props.value === undefined ? ' clickable' : '');\n\n    return (\n      <button className={classNames} onClick={() => this.props.onClick()}>\n        {this.props.value}\n      </button>\n    );\n  }\n}\n","import React from 'react';\nimport { Square } from './Square';\nimport { IBoardProps } from './types';\n\nexport class Board extends React.Component<IBoardProps, {}> {\n  renderSquare(i: number) {\n    return (\n      <Square\n        highlight={this.props.winnerLine !== undefined && this.props.winnerLine.includes(i)}\n        key={i}\n        pointer={this.props.winnerLine === undefined}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"board\">\n        {Array(9).fill(0).map((s, i) => this.renderSquare(i))}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Board } from './Board';\nimport './Game.scss';\nimport { GameHistoryRecord, GameState } from './types';\n\nexport class Game extends React.Component<{}, GameState> {\n  private static getWinner(current: GameHistoryRecord) {\n    const winnerLine = Game.getWinnerLine(current);\n    if (winnerLine) {\n      return current.squares[winnerLine[0]];\n    }\n    return null;\n  }\n\n  private static getWinnerLine(current: GameHistoryRecord) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (const line of lines) {\n      const [a, b, c] = line;\n      if (current.squares[a] && current.squares[a] === current.squares[b] && current.squares[b] === current.squares[c]) {\n        return line;\n      }\n    }\n    return undefined;\n  }\n\n  constructor(props = {}) {\n    super(props);\n    this.state = {\n      currentMove: 0,\n      history: [{\n        clicked: undefined,\n        squares: Array(9).fill(undefined),\n      }],\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i: number) {\n    const current = this.state.history[this.state.currentMove];\n    const squares = current.squares.slice();\n    if (Game.getWinner(current) || !!squares[i]) {\n      return;\n    }\n    const history = this.state.history.slice(0, this.state.currentMove + 1);\n    history[this.state.currentMove].clicked = i;\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      currentMove: this.state.currentMove + 1,\n      history: history.concat({\n        clicked: undefined,\n        squares,\n      }),\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(move: number) {\n    this.setState({\n      currentMove: move,\n      xIsNext: move % 2 === 0,\n    });\n  }\n\n  render() {\n    const history = this.state.history.slice();\n    const lastMove = history.length - 1;\n    const winnerInLastMove = Game.getWinner(history[lastMove]);\n\n    const getClickPositionHistoryRecord = (record: GameHistoryRecord) => {\n      if (record.clicked === undefined) {\n        return;\n      }\n      const turn = record.squares.filter(s => !!s).length % 2 === 0 ? 'X' : 'O';\n      const row = Math.floor(record.clicked / 3);\n      const col = record.clicked % 3;\n      return `${turn} marked row ${row + 1}, column ${col + 1}`;\n    };\n\n    const moves = history.map((step, move) => {\n      let movDesc = `#${move} `;\n      if (move === 0 && this.state.currentMove !== 0) {\n        movDesc += `Game started`;\n      } else if (winnerInLastMove && move === lastMove) {\n        movDesc += `Game ended with a victory for ${winnerInLastMove}`;\n      } else if (!winnerInLastMove && move === 9) {\n        movDesc += `Game ended with a draw`;\n      } else if (move === this.state.currentMove) {\n        movDesc += 'Current move';\n      }\n\n      const statusClassName = move !== this.state.currentMove ? 'enabled' : 'disabled';\n      return (\n        <li key={move}>\n          <p className={statusClassName} onClick={() => this.jumpTo(move)}>\n            {movDesc}\n          </p>\n          <p className=\"mov-row-col-desc\">\n            {getClickPositionHistoryRecord(history[move])}\n          </p>\n        </li>\n      );\n    });\n\n    let status;\n    const winnerInCurrentMove = Game.getWinner(history[this.state.currentMove]);\n    if (winnerInCurrentMove) {\n      status = `Game ended! ${winnerInCurrentMove} won!`;\n    } else if (this.state.currentMove === 9) {\n      status = `Game ended! It's a draw!`;\n    } else {\n      status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n    }\n\n    return (\n      <div className=\"game\">\n        <Board\n          winnerLine={Game.getWinnerLine(history[this.state.currentMove])}\n          squares={history[this.state.currentMove].squares}\n          onClick={(i) => this.handleClick(i)}\n        />\n        <div className=\"game-info\">\n          <h3>{status}</h3>\n          <ul>{moves}</ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Link,\n  Route,\n  Switch\n} from 'react-router-dom';\nimport './App.scss';\nimport { Game } from './Game/Game';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">TTT</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/about\">\n            <h2>About</h2>\n          </Route>\n          <Route path=\"/\">\n            <h2>Tic Tac TSReact!</h2>\n            <Game />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}